{"version":3,"file":"static/js/441.c29ba274.chunk.js","mappings":"2NAGMA,EAAe,CACnBC,KAAM,GACNC,MAAO,GACPC,SAAU,IAGG,SAASC,EAAT,GAAkC,IAAbC,EAAY,EAAZA,SAClC,GAA8CC,EAAAA,EAAAA,GAAQ,CACpDN,aAAAA,EACAK,SAAAA,IAFME,EAAR,EAAQA,MAAOC,EAAf,EAAeA,aAAcC,EAA7B,EAA6BA,aAKvBC,GAAUC,EAAAA,EAAAA,UAAQ,kBAAMC,EAAAA,EAAAA,KAAN,GAAgB,IAClCC,GAAaF,EAAAA,EAAAA,UAAQ,kBAAMC,EAAAA,EAAAA,KAAN,GAAgB,IACnCV,EAAoBK,EAApBL,MAAOC,EAAaI,EAAbJ,SAEf,OACE,kBAAME,SAAUI,EAAhB,WACE,kBAAOK,QAASJ,EAAhB,yBACA,kBACEK,GAAIL,EACJT,KAAK,QACLe,KAAK,QACLC,MAAOf,EACPgB,SAAUV,KAEZ,kBAAOM,QAASJ,EAAhB,4BACA,kBACEK,GAAIF,EACJG,KAAK,WACLf,KAAK,WACLgB,MAAOd,EACPe,SAAUV,KAEZ,2CAGL,C,wCClCc,SAASW,IACtB,IAAMC,GAAWC,EAAAA,EAAAA,MAKjB,OAJoBC,EAAAA,EAAAA,IAAYC,EAAAA,IAKvB,SAAC,KAAD,CAAUC,GAAG,eAGpB,4BACE,uCACA,SAACpB,EAAD,CAAWC,SATC,SAAAoB,GACdL,GAASM,EAAAA,EAAAA,GAAMD,GAChB,MAUF,C,sDCrBM,IAAMF,EAAU,SAAC,GAAD,SAAGI,KAAgBJ,OAAnB,C,8FCER,SAASjB,EAAT,GAA8C,IAA3BN,EAA0B,EAA1BA,aAAcK,EAAY,EAAZA,SAC9C,GAA0BuB,EAAAA,EAAAA,WAAS,UAAK5B,IAAxC,eAAOO,EAAP,KAAcsB,EAAd,KAiBA,MAAO,CAAEtB,MAAAA,EAAOsB,SAAAA,EAAUrB,aAfL,SAAC,GAAgB,IAAdsB,EAAa,EAAbA,OACdb,EAA+Ba,EAA/Bb,MAAOhB,EAAwB6B,EAAxB7B,KAAMe,EAAkBc,EAAlBd,KAAMe,EAAYD,EAAZC,QACrBC,EAAoB,aAAThB,EAAsBe,EAAUd,EACjDY,GAAS,SAAAI,GAAS,yBACbA,GADa,cAEfhC,EAAO+B,GAFQ,GAInB,EAQuCvB,aANnB,SAAAyB,GACnBA,EAAEC,iBACF9B,GAAS,UAAKE,IACdsB,GAAS,UAAK7B,GACf,EAGF,C","sources":["components/LoginForm/LoginForm.jsx","pages/LoginPege/LoginPege.jsx","redux/auth/authSelectors.js","shared/hooks/useForm.js"],"sourcesContent":["import { nanoid } from 'nanoid';\nimport { useMemo } from 'react';\nimport useForm from 'shared/hooks/useForm';\nconst initialState = {\n  name: '',\n  email: '',\n  password: '',\n};\n\nexport default function LoginForm({ onSubmit }) {\n  const { state, handleChange, handleSubmit } = useForm({\n    initialState,\n    onSubmit,\n  });\n\n  const emailId = useMemo(() => nanoid(), []);\n  const passwordId = useMemo(() => nanoid(), []);\n  const { email, password } = state;\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label htmlFor={emailId}>User email</label>\n      <input\n        id={emailId}\n        name=\"email\"\n        type=\"email\"\n        value={email}\n        onChange={handleChange}\n      />\n      <label htmlFor={emailId}>User password</label>\n      <input\n        id={passwordId}\n        type=\"password\"\n        name=\"password\"\n        value={password}\n        onChange={handleChange}\n      />\n      <button>Register</button>\n    </form>\n  );\n}\n","import LoginForm from 'components/LoginForm/LoginForm';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Navigate } from 'react-router-dom';\nimport { login } from 'redux/auth/authOperetion';\nimport { isLogin } from 'redux/auth/authSelectors';\n\nexport default function LoginPege() {\n  const dispatch = useDispatch();\n  const isUserLogin = useSelector(isLogin);\n  const onLogin = data => {\n    dispatch(login(data));\n  };\n  if (isUserLogin) {\n    return <Navigate to=\"/contacts\" />;\n  }\n  return (\n    <div>\n      <h1>LoginPege</h1>\n      <LoginForm onSubmit={onLogin} />\n    </div>\n  );\n}\n","export const isLogin = ({ auth }) => auth.isLogin;\n","import { useState } from 'react';\n\nexport default function useForm({ initialState, onSubmit }) {\n  const [state, setState] = useState({ ...initialState });\n\n  const handleChange = ({ target }) => {\n    const { value, name, type, checked } = target;\n    const newValue = type === 'checkbox' ? checked : value;\n    setState(prevState => ({\n      ...prevState,\n      [name]: newValue,\n    }));\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    onSubmit({ ...state });\n    setState({ ...initialState });\n  };\n\n  return { state, setState, handleChange, handleSubmit };\n}\n"],"names":["initialState","name","email","password","LoginForm","onSubmit","useForm","state","handleChange","handleSubmit","emailId","useMemo","nanoid","passwordId","htmlFor","id","type","value","onChange","LoginPege","dispatch","useDispatch","useSelector","isLogin","to","data","login","auth","useState","setState","target","checked","newValue","prevState","e","preventDefault"],"sourceRoot":""}